// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CommitCreated extends ethereum.Event {
  get params(): CommitCreated__Params {
    return new CommitCreated__Params(this);
  }
}

export class CommitCreated__Params {
  _event: CommitCreated;

  constructor(event: CommitCreated) {
    this._event = event;
  }

  get commitId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get projectId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get commiter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get erc20Token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CommitWithdrawn extends ethereum.Event {
  get params(): CommitWithdrawn__Params {
    return new CommitWithdrawn__Params(this);
  }
}

export class CommitWithdrawn__Params {
  _event: CommitWithdrawn;

  constructor(event: CommitWithdrawn) {
    this._event = event;
  }

  get commitId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get commiter(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FundsRedeemedForProject extends ethereum.Event {
  get params(): FundsRedeemedForProject__Params {
    return new FundsRedeemedForProject__Params(this);
  }
}

export class FundsRedeemedForProject__Params {
  _event: FundsRedeemedForProject;

  constructor(event: FundsRedeemedForProject) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ProjectCreated extends ethereum.Event {
  get params(): ProjectCreated__Params {
    return new ProjectCreated__Params(this);
  }
}

export class ProjectCreated__Params {
  _event: ProjectCreated;

  constructor(event: ProjectCreated) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RedeemFailed extends ethereum.Event {
  get params(): RedeemFailed__Params {
    return new RedeemFailed__Params(this);
  }
}

export class RedeemFailed__Params {
  _event: RedeemFailed;

  constructor(event: RedeemFailed) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get commitId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RedeemSucceeded extends ethereum.Event {
  get params(): RedeemSucceeded__Params {
    return new RedeemSucceeded__Params(this);
  }
}

export class RedeemSucceeded__Params {
  _event: RedeemSucceeded;

  constructor(event: RedeemSucceeded) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get commitId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PreCommitManager__commitsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class PreCommitManager__projectsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class PreCommitManager extends ethereum.SmartContract {
  static bind(address: Address): PreCommitManager {
    return new PreCommitManager("PreCommitManager", address);
  }

  commits(param0: BigInt): PreCommitManager__commitsResult {
    let result = super.call(
      "commits",
      "commits(uint256):(uint256,uint256,address,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PreCommitManager__commitsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_commits(
    param0: BigInt
  ): ethereum.CallResult<PreCommitManager__commitsResult> {
    let result = super.tryCall(
      "commits",
      "commits(uint256):(uint256,uint256,address,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PreCommitManager__commitsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  projects(param0: BigInt): PreCommitManager__projectsResult {
    let result = super.call("projects", "projects(uint256):(address,address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new PreCommitManager__projectsResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_projects(
    param0: BigInt
  ): ethereum.CallResult<PreCommitManager__projectsResult> {
    let result = super.tryCall(
      "projects",
      "projects(uint256):(address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PreCommitManager__projectsResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }
}

export class CommitCall extends ethereum.Call {
  get inputs(): CommitCall__Inputs {
    return new CommitCall__Inputs(this);
  }

  get outputs(): CommitCall__Outputs {
    return new CommitCall__Outputs(this);
  }
}

export class CommitCall__Inputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CommitCall__Outputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }
}

export class CreateProjectCall extends ethereum.Call {
  get inputs(): CreateProjectCall__Inputs {
    return new CreateProjectCall__Inputs(this);
  }

  get outputs(): CreateProjectCall__Outputs {
    return new CreateProjectCall__Outputs(this);
  }
}

export class CreateProjectCall__Inputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get projectAcceptedAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateProjectCall__Outputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get commitIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class WithdrawCommitCall extends ethereum.Call {
  get inputs(): WithdrawCommitCall__Inputs {
    return new WithdrawCommitCall__Inputs(this);
  }

  get outputs(): WithdrawCommitCall__Outputs {
    return new WithdrawCommitCall__Outputs(this);
  }
}

export class WithdrawCommitCall__Inputs {
  _call: WithdrawCommitCall;

  constructor(call: WithdrawCommitCall) {
    this._call = call;
  }

  get commitId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCommitCall__Outputs {
  _call: WithdrawCommitCall;

  constructor(call: WithdrawCommitCall) {
    this._call = call;
  }
}
