// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CommitExpiringWarning extends ethereum.Event {
  get params(): CommitExpiringWarning__Params {
    return new CommitExpiringWarning__Params(this);
  }
}

export class CommitExpiringWarning__Params {
  _event: CommitExpiringWarning;

  constructor(event: CommitExpiringWarning) {
    this._event = event;
  }

  get commitId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CheckExpiring extends ethereum.SmartContract {
  static bind(address: Address): CheckExpiring {
    return new CheckExpiring("CheckExpiring", address);
  }

  minimumInterval(): BigInt {
    let result = super.call(
      "minimumInterval",
      "minimumInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumInterval",
      "minimumInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  preCommitManager(): Address {
    let result = super.call(
      "preCommitManager",
      "preCommitManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_preCommitManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "preCommitManager",
      "preCommitManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  warningTime(): BigInt {
    let result = super.call("warningTime", "warningTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_warningTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("warningTime", "warningTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get preCommitManager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minimumInterval_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get warningTime_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CheckAtMinIntervalCall extends ethereum.Call {
  get inputs(): CheckAtMinIntervalCall__Inputs {
    return new CheckAtMinIntervalCall__Inputs(this);
  }

  get outputs(): CheckAtMinIntervalCall__Outputs {
    return new CheckAtMinIntervalCall__Outputs(this);
  }
}

export class CheckAtMinIntervalCall__Inputs {
  _call: CheckAtMinIntervalCall;

  constructor(call: CheckAtMinIntervalCall) {
    this._call = call;
  }
}

export class CheckAtMinIntervalCall__Outputs {
  _call: CheckAtMinIntervalCall;

  constructor(call: CheckAtMinIntervalCall) {
    this._call = call;
  }
}

export class CheckExpirationCall extends ethereum.Call {
  get inputs(): CheckExpirationCall__Inputs {
    return new CheckExpirationCall__Inputs(this);
  }

  get outputs(): CheckExpirationCall__Outputs {
    return new CheckExpirationCall__Outputs(this);
  }
}

export class CheckExpirationCall__Inputs {
  _call: CheckExpirationCall;

  constructor(call: CheckExpirationCall) {
    this._call = call;
  }
}

export class CheckExpirationCall__Outputs {
  _call: CheckExpirationCall;

  constructor(call: CheckExpirationCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMinimumIntervalCall extends ethereum.Call {
  get inputs(): SetMinimumIntervalCall__Inputs {
    return new SetMinimumIntervalCall__Inputs(this);
  }

  get outputs(): SetMinimumIntervalCall__Outputs {
    return new SetMinimumIntervalCall__Outputs(this);
  }
}

export class SetMinimumIntervalCall__Inputs {
  _call: SetMinimumIntervalCall;

  constructor(call: SetMinimumIntervalCall) {
    this._call = call;
  }

  get minimumInterval_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumIntervalCall__Outputs {
  _call: SetMinimumIntervalCall;

  constructor(call: SetMinimumIntervalCall) {
    this._call = call;
  }
}

export class SetPreCommitManagerCall extends ethereum.Call {
  get inputs(): SetPreCommitManagerCall__Inputs {
    return new SetPreCommitManagerCall__Inputs(this);
  }

  get outputs(): SetPreCommitManagerCall__Outputs {
    return new SetPreCommitManagerCall__Outputs(this);
  }
}

export class SetPreCommitManagerCall__Inputs {
  _call: SetPreCommitManagerCall;

  constructor(call: SetPreCommitManagerCall) {
    this._call = call;
  }

  get preCommitManager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPreCommitManagerCall__Outputs {
  _call: SetPreCommitManagerCall;

  constructor(call: SetPreCommitManagerCall) {
    this._call = call;
  }
}

export class SetWarningTimeCall extends ethereum.Call {
  get inputs(): SetWarningTimeCall__Inputs {
    return new SetWarningTimeCall__Inputs(this);
  }

  get outputs(): SetWarningTimeCall__Outputs {
    return new SetWarningTimeCall__Outputs(this);
  }
}

export class SetWarningTimeCall__Inputs {
  _call: SetWarningTimeCall;

  constructor(call: SetWarningTimeCall) {
    this._call = call;
  }

  get warningTime_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWarningTimeCall__Outputs {
  _call: SetWarningTimeCall;

  constructor(call: SetWarningTimeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
